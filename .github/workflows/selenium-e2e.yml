name: Run tbot e2e

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: docker build --tag my-elixir-app:latest .

      - name: Install Chrome and ChromeDriver
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
          DRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chromedriver-linux64.zip"
          wget $DRIVER_URL -O chromedriver-linux64.zip
          unzip chromedriver-linux64.zip -d .
          mv -f chromedriver-linux64/chromedriver ~/chromedriver
          chmod +x $HOME/chromedriver
          google-chrome --version
          $HOME/chromedriver --version

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Create and activate virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          source venv/bin/activate
          cd python
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install docker compose
        run: |
          sudo apt update
          sudo apt install -y docker-compose

      - name: Run tbot instances
        run: |
          docker run -d --name postgres-db --network host -e POSTGRES_PASSWORD=dataBaseWaterBottle -e POSTGRES_DB=website_45s_v3_dev postgres:15
          docker run -d --name my-elixir-app-container --network host -e DATABASE_HOST=localhost -e DATABASE_PORT=5432 -e DATABASE_USER=postgres -e DATABASE_PASSWORD=dataBaseWaterBottle -e DATABASE_NAME=website_45s_v3_dev -p 4000:4000 my-elixir-app:latest
          timeout=300
          start_time=$(date +%s)
          while ! curl -s http://localhost:4000; do
            if [ $(($(date +%s) - start_time)) -ge $timeout ]; then
              echo "Timeout waiting for the elixir docker container to be ready."
              docker logs my-elixir-app-container
              exit 1
            fi
            echo 'Waiting for the elixir docker container...'
            sleep 5
          done
          echo 'Server is ready!'
          source venv/bin/activate
          echo 'Running wait play'
          python python/wait_play.py || { echo 'wait_play.py failed'; exit 1; }
          echo 'Wait play successful'
          timeout 600 bash -c '
            for i in {1..4}; do
              python python/tbot.py &
            done
            wait -n
            wait
          ' || { echo 'tbot instances failed'; exit 1; }
